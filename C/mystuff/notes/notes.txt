Conmmands Keyboard:
ctrl + c: cancel program
ctrl + l: clear terminal
cmd + k or cmd + s: keyboard shortcuts
cmd + shft + p: Command window
TAB after cd and one letter to quickly fill in directories

Library:
https://manual.cs50.io/

cs50 commands:
render50: renders the file into a pdf, use -y for side by side ex) render50 -o notes.pdf -y notes.txt ch2_notes.txt
submit50: submits a file through submit50.com and github, needs a slug
check50: does your code hit all of the check50 tirals? yes? use submit50
style50: styles your code according to the cs50 standard, needs to be done on the .c file ex) style50 rock_paper_scissors.c

Extentions:
.py : Python
.c: C
.cpp : c++
.jav : java

CS50 LECTURE 1 NOTES:

Commands Terminal:
cd: change directory
cp: copy file
ls: list items in a directory
mkdir: make a new directory
mv: "move" a file, renames it
rm: remove a file
rmdir: remove a directory

ALWAYS INCLUDE:

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // CODE HERE
}


Placeholders
    %s: string replacement
    %i: int replacement
    %d: for signed integer type
    %ld: long replacement
    %f: float/double replacement
    %lli: long long replacement
    %c: char replacement
    %p: pointer replacement
    %u: unnasigned int

Conditionals: Conditionals are if statenents that check for certain perameters

ex)
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int x = get_int("What is x? ");
    int y = get_int("What is y? ");
    if (x > y)
    {
        printf("x is greater than y");
    }
}

ex2)
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int x = get_int("What is x? ");
    int y = get_int("What is y? ");
    if (x < y)
    {
        printf("x is less than y.");
    }
    else
    {
        printf("x is greater than y.");
    }
}

ex3}
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int x = get_int("What is x? ");
    int y = get_int("What is y? ");
    if (x < y)
    {
        printf("x is less than y");
    }
    else if (x > y)
    {
        printf("x is greater than y");
    }
    else(x == y)
    {
        printf("x is equal to y");
    }
}

Variable assignment;
    1. For intigers use get_int("What's your int? ");
    2. For strings use get_string("What's your string? ");
    3. For characters use get_char("What's your char? ");

Loops:

Incrementing: Increasing an int-variable's value

ex. While Loops)
##include <cs50.h>
#include <stdio.h>

int main(void)
{
    int i = 0;
    while (i < 3)
    {
        printf("hello, world\n");
        i++;
    }
}

ex. For Loops)
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    for (int i = 1; i <= 3; i++)
    {
        printf("%d\n", i);
    }
}

ex. Forever Loop)
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int i = 0;
    while (true || 1)
    {
        printf("%d\n", i);
        i++;
    }
}

Decrimenting: Decreasing an int-variable's value

ex. While Loops)
##include <cs50.h>
#include <stdio.h>

int main(void)
{
    int i = 3;
    while (i < 0)
    {
        printf("hello, world\n");
        i--;
    }
}

ex. For Loops)
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    for (int i = 3; i <= 0; i--)
    {
        printf("%d\n", i);
    }
}

ex. Forever Loop)
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int i = 0;
    while (true || 1)
    {
        printf("%d\n", i);
        i--;
    }
}

Paradigm: DO WHILE Loop
    - The function will repeat itself as long as conditions are met

ex)
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int n;
    do
    {
       n = get_int("thing: ");
    }
    while (n < lower limit)
    return n;
}

Colors:
#7E4EAC: Purple
#FFECAC: Cream
#00BCE1: Cyan


CS50 LECTURE 2 NOTES:

Command line argument:
Aditional word or phrase that you type that modifies the output

ex) clang -o hello hello.c -lcs50
    - clang: compiler
    - -o: change output
    - hello: renames a.out to hello
    - hello.c: compiled
    - -lcs50: any non included library must be defined by -l (link)
./hello

Compiling Steps:
    + Preprossesing:
        Anything that needs to be initialized before anything else happens
        ex) #include ......

    + Compiling:
        Once a program has been preprocessed, clang or any other compiler converts the code to assembley code (less user friendly).

    + Assembling:
        Converts the assembley code to machine code (1's and 0's)

    + Linking:
        Combining all the 0's and 1's from the libraries, your code, and links them all together

Decompiling:
    + Converting machine code back to readable code
        - Decompiling isn't the best because it is easier to find exploits in the code
    + It is not so simple because the machine code removes variable names, and can change loop types

Debugging:
    + Fixing logical or syntax errors
        - lab 2 is the debugged code lab

    Debugger:
        There is an automated debugger in VSCode that CS50 provides, you can set a breakpoint where the code will pause
            - debug50 ./machine code name
                - Stop Over: step over the paused line
                - Step Into: each line of the paused line

    Rubber Duck Debugging:
        - Sound out your problem with a rubber duck or another person

Arrays:
    Data Types:
        + Bool : 1 byte, true/false
        + Int : 4 bytes, whole numbers
        + Long : 8 bytes, whole numbers
        + Float : 4 bytes, numbers with decimals
        + Double :  8 bytes, numbers with decimals
        + Char : 1 byte, characters
        + String : ? bytes, words

    Type Casting:
        - Changing the data type of a line of code
        ex) ...../ (float) 3

    - An Array is a way of storing data back to back to back
        ex) int scores[3]; : give me 12 Bytes in total
            int scores[0] = 72;
            int scores[1] = 77;
            int scores[2] = 33;
        - Makes it so that you dont need to declare a seperate var each time, but this way is kinda bad because of hard coding values
            - Dont hard code the values of the array, use a for loop that promopts user input
            ex)
               int scores[3];
               for (int i = 0; i < 3; i++)
               {
                scores[i] = get_int("scores: ");
               }

    Strings: They are Variable length
        - Just an array of characters
        ex)
            string s = "HI!" == array[3]
            array[0] = H
            array[1] = I
            array[2] = !
            array[3] = \0

    Break character: \0, special zero, NUL, means string ends here

        string.h:
            - Library of string related functions

Command Line Arguments: replaces the void section in main
    - Allows for faster and more efficient coding
        ex)
            #include <cs50.h>
            #include <stdio.h>

            int main(int argc, string argv[])
            {
                string name = get_string("Name: ");
                printf("Hello %s\n", name);
            }
        - argv[] is some array of strings or all words you type as the prompt, argc == argument count, or the length of the array of strings

    run it with ./greet INPUT to say hello INPUT

cowsay:
- A CLA of a cow saying something in ASCII Art in the terminal
    ex) cowsay moo
_____
< moo >
 -----
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

    ex) cowsay -f duck quack
 _______
< quack >
 -------
 \
  \
   \ >()_
      (__)__ _

    ex) cowsay -f dragon RAWR
 ______
< RAWR >
 ------
      \                    / \  //\
       \    |\___/|      /   \//  \\
            /0  0  \__  /    //  | \ \
           /     /  \/_/    //   |  \  \
           @_^_@'/   \/_   //    |   \   \
           //_^_/     \/_ //     |    \    \
        ( //) |        \///      |     \     \
      ( / /) _|_ /   )  //       |      \     _\
    ( // /) '/,_ _ _/  ( ; -.    |    _ _\.-~        .-~~~^-.
  (( / / )) ,-{        _      `-.|.-~-.           .~         `.
 (( // / ))  '/\      /                 ~-. _ .-~      .-~^-.  \
 (( /// ))      `.   {            }                   /      \  \
  (( / ))     .----~-.\        \-'                 .~         \  `. \^-.
             ///.----..>        \             _ -~             `.  ^-`  ^-_
               ///-._ _ _ _ _ _ _}^ - - - - ~                     ~-- ,.-~
                                                                  /.-~

Exit Status:
    - A secret int that returns itself, typically in errors
    ex) error 404

    The int in main will always return an integer

    echo $? : will display the exit status of the program a "0" means success

Cryptography:
    - Endripting code, scrambling what you want to say
    - Decripting code, unscrambling what you want to say

CS50 LECTURE 3 NOTES

Algorithms:
    Linear Search
        - Checking each part of an array in a linear way using a for loop, this is the 'n' method
        ex)
            for each door left to right
                if 50 is behind door
                    return true
                return false

            for i from 0 to n-1
                If 50 is behing doors[i]
                    return true
                return false

    Binary Search
        - checking a midpoint for a value and then checking conditions from a sorted array, 'n/2' form
        ex)
            if no doors left
                return false
            if 50 is behind middle door
                return true
            else if 50 < middle door
                search left half
            else if 50 > middle door
                search right half

            if no doors left
                return false
            if 50 behing doors[middle]
                return true
            else if 50 < doors[middle - 1]
                search doors[0] through doors[middle - 1]
            else if 50 > doors[middle]
                search doors[middle + 1] through doors[n - 1]

Running time:

Classes       n         Complexity number of operations (10)      Execution Time (1 instruction/μsec)

constant      O(1)      1                                         1 μsec

logarithmic   O(logn)   3.32                                      3 μsec

linear        O(n)      10                                        10 μsec

O(nlogn)      O(nlogn)  33.2                                      33 μsec

quadratic     O(n2)     102                                       100 μsec

cubic.        O(n3)     103                                       1msec

exponential   O(2n)     1024                                      10 msec

factorial     O(n!)     10!                                       3.6288 sec

O() stands for order of, and type sets upper bound, putting in the omega symbol signifies the lover bound, theta means they have the same upper and lower bound.

Segmentation Fault : memory you shouldnt have touched or accessed

