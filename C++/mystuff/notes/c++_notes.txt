C++ Intro

Shortcuts:
ctrl + c: cancel program
ctrl + l: clear terminal
cmd + k or cmd + s: keyboard shortcuts
cmd + shft + p: Command window
TAB after cd and one letter to quickly fill in directories
cmd + s : save
cmd + a : select all
cmd + c : copy
cmd + v : paste
cmd + x : cut
cmd + z : undo
cmd + f : find
cmd + ] : indent right
cmd + [ : indent left

SYNTAX:

    first program ex)

    #include <iostream> // Header File Library, Header files add functionality to C++ programs
    using namespace std; // means that we can use names for objects and variables from the standard library

    int main() {
      cout << "Hello World!\n";
      return 0;
    }


        int main() : this is a function that is nescessary for the program to run
        cout : is an object used together with the insertion operator (<<) to output/print text. In the example it will output "Hello World!"

        Every C++ statement ends with a semicolon ;
        return 0 : ends the main function

    Omitting Namespace:
    You might see some C++ programs that runs without the standard namespace library.
    The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for some objects:

    ex) std::cout << ...


    Compile and Execute C++ Program:
        Let's look at how to save the file, compile and run the program. Please follow the steps given below âˆ’

        Open a text editor and add the code as above.

        Save the file as: hello.cpp

        Open a command prompt and go to the directory where you saved the file.

        Type 'g++ hello.cpp' and press enter to compile your code. If there are no errors in your code the command prompt will take you to the next line and would generate a.out executable file.

        Now, type 'a.out' to run your program.

        You will be able to see ' Hello World ' printed on the window.

        $ g++ hello.cpp
        $ ./a.out
        Hello World
        Make sure that g++ is in your path and that you are running it in the directory containing file hello.cpp.

Output:

    The cout object, together with the << operator, is used to output values/print text:
    ex)
        #include <iostream>
        using namespace std;

        int main()
        {
          cout << "Hello, World!\n";
          cout << "I am learning C++\n"
        }

    To insert a new line, you can use the \n character:

    /n == endl

    Escape Sequences:

      \n, endl : creates a new line
      \t : Creates a horizontal tab
      \\ : backslash
      \" : double quotes

Comments:

    // : is how to do a single line comment

    /*
        is how we do multi lione comments
    */

Variables:

    In C++, there are different types of variables (defined with different keywords):

      int - stores integers (whole numbers), without decimals, such as 123 or -123
      double - stores floating point numbers, with decimals, such as 19.99 or -19.99
      char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
      string - stores text, such as "Hello World". String values are surrounded by double quotes
      bool - stores values with two states: true or false

      Declaration:
          type variableName = value;

          type refrences data type
          variableName is the name of a variable
          value is the value of the variable (int, char, double, string, bool...etc.)

          ex)
              int myNum = 15;
              cout << myNum;


      Display Variables:

          The cout object is used together with the << operator to display variables.

          To combine both text and a variable, separate them with the << operator:

          Example
          int myAge = 35;
          cout << "I am " << myAge << " years old.";

      Multiple Variables:

          you can declare multiple of the same variable in the same line, they need to be seperated by commas

          ex)
              int x = 5, y = 10, z = x + y;

          you can also assign the same value to multiple variables in one line:

          ex)
              int x, y, z;

              x = y = z = 50;

C++ Identifiers:

    All C++ variables must be identified with unique names.

    These unique names are called identifiers.

    Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).

    Note: It is recommended to use descriptive names in order to create understandable and maintainable code:

    ex)
        // Good
        int minutesPerHour = 60;

        // OK, but not so easy to understand what m actually is
        int m = 60;

    The general rules for naming variables are:

        Names can contain letters, digits and underscores
        Names must begin with a letter or an underscore (_)
        Names are case sensitive (myVar and myvar are different variables)
        Names cannot contain whitespaces or special characters like !, #, %, etc.
        Reserved words (like C++ keywords, such as int) cannot be used as names

Constants:

      When you do not want others (or yourself) to change existing variable values, use the const keyword
      this will declare the variable as "constant", which means unchangeable and read-only:

      ex)
          const int myNum = 15;  // myNum will always be 15
          myNum = 10;  // error: assignment of read-only variable 'myNum'


    You should always declare the variable as constant when you have values that are unlikely to change:

    ex)
        const int minutesPerHour = 60;
        const float PI = 3.14;

C++ User Input:

    You have already learned that cout is used to output (print) values. Now we will use cin to get user input.

    cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).

    ex)
        int x;
        cout << "Type a number: "; // Type a number and press enter
        cin >> x; // Get user input from the keyboard
        cout << "Your number is: " << x; // Display the input value

C++ Data Types:

    As explained in the Variables chapter, a variable in C++ must be a specified data type:

    ex)
    int myNum = 5;               // Integer (whole number)
    float myFloatNum = 5.99;     // Floating point number
    double myDoubleNum = 9.98;   // Floating point number
    char myLetter = 'D';         // Character
    bool myBoolean = true;       // Boolean
    string myText = "Hello";     // String


    Basic Data Types:

        The data type specifies the size and type of information the variable will store:

        Data Type	Size	            Description
        boolean 	1 byte	            Stores true or false values
        char	    1 byte	            Stores a single character/letter/number, or ASCII values
        int	        2 or 4 bytes	    Stores whole numbers, without decimals
        float	    4 bytes	            Stores fractional numbers, containing one or more decimals. Sufficient for storing 6-7 decimal digits
        double	    8 bytes	            Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits

    Numeric Types:

        Use int when you need to store a whole number without decimals, like 35 or 1000,
        float or double when you need a floating point number (with decimals), like 9.99 or 3.14515.


        float vs. double:

            The precision of a floating point value indicates how many digits the value can have after the decimal point.
            The precision of float is only six or seven decimal digits, while double variables have a precision of about 15 digits.
            Therefore it is safer to use double for most calculations.

        Scientific Numbers:

            A floating point number can also be a scientific number with an "e" to indicate the power of 10:
                e is used as the exponent substiution


        int)
            int myNum = 1000;
            cout << myNum;

        float)
            float myNum = 5.75;
            cout << myNum;

        double)
            double myNum = 19.99;
            cout << myNum;

        sci not)
            float f1 = 35e3;
            double d1 = 12E4;
            cout << f1;
            cout << d1;

        Boolean Types:

            A boolean data type is declared with the bool keyword and can only take the values true or false.
            When the value is returned, true = 1 and false = 0.

                ex)
                    bool isCodingFun = true;
                    bool isFishTasty = false;
                    cout << isCodingFun;  // Outputs 1 (true)
                    cout << isFishTasty;  // Outputs 0 (false)

        Character Types:

                The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':

                ex)
                    char myGrade = 'B';
                    cout << myGrade;

            Alternatively, you can use ASCII values to display certain characters:

                ex)
                    char a = 65, b = 66, c = 67;
                    cout << a;
                    cout << b;
                    cout << c;

        String Types:

            The string type is used to store a sequence of characters (text). This is not a built-in type, but it behaves like one in its most basic usage.
            String values must be surrounded by double quotes:
            also remember to include the string library

            ex)

                // Include the string library
                #include <string>

                // Create a string variable
                string greeting = "Hello";

                // Output string value
                cout << greeting;

C++ Operators:

    Operators are used to perform operations on variables and values.

    Operator list:
        + : add
        - : subtract
        / : divide
        * : multiply
        % : modulus
        ++: increment
        -- : decrement

        Assignment Operators

            Assignment operators are used to assign values to variables.

            = : gets/assigned to : x = : x = 3
            += : add __ to __ : x += x + __ : x += 3 : x = x + 3
            -= : subtract __ to __ : x -= x - __ : x -= 3 : x = x - 3
            *= : multiply __ by __ : x *= x * __ : x *= 3 : x = x * 3
            /= : divide __ by __ : x /= x / __ : x /= 3 : x = x / 3
            %= : mod __ by __ : x %= x % __ : x %= 3 : x = x % 3
            &= : __ is __ and __ : x &= x & __ : x &=3 : x = x & 3
            |= : __ is __ or __ : x |= x | __ : x |= 3 : x = x | 3
            ^= : __ raised to __ : x ^= x ^ __ : x ^= 3 : x = x ^ 3

        Comparison Operators:

            Comparison operators are used to compare two values (or variables).
            This is important in programming, because it helps us to find answers and make decisions.

            The return value of a comparison is either 1 or 0, which means true (1) or false (0).

            ==	Equal to	x == y
            !=	Not equal	x != y
            >	Greater than	x > y
            <	Less than	x < y
            >=	Greater than or equal to	x >= y
            <=	Less than or equal to	x <= y

        Logical Operators:

            As with comparison operators, you can also test for true (1) or false (0) values with logical operators.

            && 	Logical and	Returns true if both statements are true	x < 5 &&  x < 10
            || 	Logical or	Returns true if one of the statements is true	x < 5 || x < 4
            !	Logical not	Reverse the result, returns false if the result is true	!(x < 5 && x < 10)

Strings:

    Strings are used for storing text.

    A string variable contains a collection of characters surrounded by double quotes:

    ex)
        string greeting = "Hello";

    To use strings, you must include an additional header file in the source code, the <string> library:

    String Concatenation:

        The + operator can be used between strings to add them together to make a new string. This is called concatenation:

        ex)
            string firstName = "John ";
            string lastName = "Doe";
            string fullName = firstName + lastName;
            cout << fullName;

            Append:

                A string in C++ is actually an object, which contain functions that can perform certain operations on strings.
                For example, you can also concatenate strings with the append() function:

                ex)
                    string firstName = "John ";
                    string lastName = "Doe";
                    string fullName = firstName.append(lastName);
                    cout << fullName;

        WARNING!

        C++ uses the + operator for both addition and concatenation.

        Numbers are added. Strings are concatenated

        If you try to add a number to a string, an error occurs.

        String Length:

            To get the length of a string, use the length() function:

            ex)
                string txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                cout << "The length of the txt string is: " << txt.length()

                NOTE : both length(), and size() do he same thing

        Access Strings:
            You can access the characters in a string by referring to its index number inside square brackets [].

            This example prints the first character in myString:

            string myString = "Hello";
            cout << myString[0]; // prints out H

            Note: String indexes start with 0: [0] is the first character.

            Change String Characters:
                To change the value of a specific character in a string, refer to the index number, and use single quotes:

                string myString = "Hello";
                myString[0] = 'J';
                cout << myString; // outputs Jello instead of Hello

        Strings - Special Characters:

            Because strings must be written within quotes, C++ will misunderstand this string, and generate an error:

            \'	'	Single quote
            \"	"	Double quote
            \\	\	Backslash
            \n	New Line
            \t	Tab

        User Input Strings:

            It is possible to use the extraction operator >> on cin to store a string entered by a user:

            string firstName;
            cout << "Type your first name: ";
            cin >> firstName; // get user input from the keyboard
            cout << "Your name is: " << firstName;

            However, cin considers a space (whitespace, tabs, etc) as a terminating character,
            which means that it can only store a single word (even if you type many words):

            string fullName;
            cout << "Type your full name: ";
            cin >> fullName;
            cout << "Your name is: " << fullName;

            // Type your full name: John Doe 
            // Your name is: John

            That's why, when working with strings, we often use the getline() function to read a line of text.
            It takes cin as the first parameter, and the string variable as second:

            string fullName;
            cout << "Type your full name: ";
            getline (cin, fullName);
            cout << "Your name is: " << fullName;

            // Type your full name: John Doe
            // Your name is: John Doe

        Omitting Namespace:
            You might see some C++ programs that runs without the standard namespace library.
            The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for string (and cout) objects:

            #include <iostream>
            #include <string>

            int main(){
            std::string greeting = "Hello";
            std::cout << greeting;
            return 0;
            }

            It is up to you if you want to include the standard namespace library or not.

C++ Math:
        C++ has many functions that allows you to perform mathematical tasks on numbers.

        C++ <cmath> Header:
            Other functions, such as sqrt (square root), round (rounds a number) and log (natural logarithm), can be found in the <cmath> header file:

C++ Booleans:

        Very often, in programming, you will need a data type that can only have one of two values, like:

        YES / NO
        ON / OFF
        TRUE / FALSE
        For this, C++ has a bool data type, which can take the values true (1) or false (0).

        Boolean Values:

            A boolean variable is declared with the bool keyword and can only take the values true or false:

            bool isCodingFun = true;
            bool isFishTasty = false;
            cout << isCodingFun;  // Outputs 1 (true)
            cout << isFishTasty;  // Outputs 0 (false)

            From the example above, you can read that a true value returns 1, and false returns 0.

            However, it is more common to return a boolean value by comparing values and variables

            Boolean Expression:

                A Boolean expression returns a boolean value that is either 1 (true) or 0 (false).

                This is useful to build logic, and find answers.

                You can use a comparison operator, such as the greater than (>) operator, to find out if an expression (or variable) is true or false:

                int x = 10;
                int y = 9;
                cout << (x > y); // returns 1 (true), because 10 is higher than 9

C++ Conditions and If Statements:

        You already know that C++ supports the usual logical conditions from mathematics:

        Less than: a < b
        Less than or equal to: a <= b
        Greater than: a > b
        Greater than or equal to: a >= b
        Equal to a == b
        Not Equal to: a != b
        You can use these conditions to perform different actions for different decisions.

        C++ has the following conditional statements:

        Use if to specify a block of code to be executed, if a specified condition is true
        Use else to specify a block of code to be executed, if the same condition is false
        Use else if to specify a new condition to test, if the first condition is false
        Use switch to specify many alternative blocks of code to be executed

        The if Statement:

            Use the if statement to specify a block of C++ code to be executed if a condition is true.

            Syntax:

            if (condition) {
            // block of code to be executed if the condition is true
            }

        The else Statement:

            Use the else statement to specify a block of code to be executed if the condition is false.

            Syntax:

            if (condition) {
            // block of code to be executed if the condition is true
            } else {
            // block of code to be executed if the condition is false
            }

        The else if Statement:

            Use the else if statement to specify a new condition if the first condition is false.

            Syntax:

            if (condition1) {
            // block of code to be executed if condition1 is true
            } else if (condition2) {
            // block of code to be executed if the condition1 is false and condition2 is true
            } else {
            // block of code to be executed if the condition1 is false and condition2 is false
            }

        Short Hand If...Else (Ternary Operator):

            There is also a short-hand if else, which is known as the ternary operator because it consists of three operands.
            It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:

            Syntax:

            variable = (condition) ? expressionTrue : expressionFalse;

        C++ Switch Statements:

            Use the switch statement to select one of many code blocks to be executed.

            Syntax:

            switch(expression) {
            case x:
                // code block
                break;
            case y:
                // code block
                break;
            default:
                // code block
            }

        This is how it works:

            The switch expression is evaluated once
            The value of the expression is compared with the values of each case
            If there is a match, the associated block of code is executed
            The break and default keywords are optional, and will be described later in this chapter

            The break Keyword:

                When C++ reaches a break keyword, it breaks out of the switch block.

                This will stop the execution of more code and case testing inside the block.

                When a match is found, and the job is done, it's time for a break. There is no need for more testing.

                A break can save a lot of execution time because it "ignores" the execution of all the rest of the code in the switch block.

            The default Keyword;

                The default keyword specifies some code to run if there is no case match.

C++ Loops:

        Loops can execute a block of code as long as a specified condition is reached.

        Loops are handy because they save time, reduce errors, and they make code more readable.

        C++ While Loop:

            The while loop loops through a block of code as long as a specified condition is true:

            Syntax
            while (condition) {
            // code block to be executed
            }

        The Do/While Loop:

            The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true,
            then it will repeat the loop as long as the condition is true.

            Syntax
            do {
            // code block to be executed
            }
            while (condition);

        C++ For Loop:

            When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:

            Syntax
            for (statement 1; statement 2; statement 3) {
            // code block to be executed
            }

        Nested Loops:

            It is also possible to place a loop inside another loop. This is called a nested loop.

            The "inner loop" will be executed one time for each iteration of the "outer loop":

            Example
            // Outer loop
            for (int i = 1; i <= 2; ++i){
            cout << "Outer: " << i << "\n"; // Executes 2 times

            // Inner loop
            for (int j = 1; j <= 3; ++j) {
                cout << " Inner: " << j << "\n"; // Executes 6 times (2 * 3)
            }
            }

        The foreach Loop:

            There is also a "for-each loop" (introduced in C++ version 11 (2011), which is used exclusively to loop through elements in an array
            (or other data sets):

            Syntax
            for (type variableName : arrayName) {
            // code block to be executed
            }

C++ Break:

        You have already seen the break statement used in an earlier chapter of this tutorial. It was used to "jump out" of a switch statement.

        The break statement can also be used to jump out of a loop.

        Example:

            for (int i = 0; i < 10; i++) {
            if (i == 4) {
                break;
            }
            cout << i << "\n";
            }

        Break and Continue in While Loop:
            You can also use break and continue in while loops:

            Break Example
            int i = 0;
            while (i < 10) {
            cout << i << "\n";
            i++;
            if (i == 4) {
                break;
            }
            }

C++ Continue:

        The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

        Example:

            for (int i = 0; i < 10; i++) {
            if (i == 4) {
                continue;
            }
            cout << i << "\n";
            }

            Continue Example:

            int i = 0;
            while (i < 10) {
            if (i == 4) {
                i++;
                continue;
            }
            cout << i << "\n";
            i++;
            }

C++ Arrays:

        Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.

        To declare an array, define the variable type, specify the name of the array followed by square brackets and specify the number of
        elements it should store

        Access the Elements of an Array:

            You access an array element by referring to the index number inside square brackets [].

            Note: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.

        Change an Array Element:

            To change the value of a specific element, refer to the index number

        Loop Through an Array:

            You can loop through the array elements with the for loop.

            Example:

                string cars[5] = {"Volvo", "BMW", "Ford", "Mazda", "Tesla"};
                for (int i = 0; i < 5; i++) {
                cout << cars[i] << "\n";
                }

        The foreach Loop:

            There is also a "for-each loop" (introduced in C++ version 11 (2011), which is used exclusively to loop through elements in an array:

            Example:

                int myNumbers[5] = {10, 20, 30, 40, 50};
                for (int i : myNumbers) {
                cout << i << "\n";
                }

        Omit Array Size:

        In C++, you don't have to specify the size of the array. The compiler is smart enough to determine the size of the array based on the number
        of inserted values.

            Omit Elements on Declaration:

                    It is also possible to declare an array without specifying the elements on declaration, and add them later:

                    Example
                    string cars[5];
                    cars[0] = "Volvo";
                    cars[1] = "BMW";
                    ...

        Get the Size of an Array:

            To get the size of an array, you can use the sizeof() operator:

                Example:

                int myNumbers[5] = {10, 20, 30, 40, 50};
                cout << sizeof(myNumbers);

            It is because the sizeof() operator returns the size of a type in bytes.

            To find out how many elements an array has, you have to divide the size of the array by the size of the data type it contains:

                Example:

                int myNumbers[5] = {10, 20, 30, 40, 50};
                int getArrayLength = sizeof(myNumbers) / sizeof(int);
                cout << getArrayLength;


                Loop Through an Array with sizeof():

                    In the Arrays and Loops Chapter, we wrote the size of the array in the loop condition (i < 5).
                    This is not ideal, since it will only work for arrays of a specified size.

                    However, by using the sizeof() approach from the example above, we can now make loops that work for arrays of any size,
                    which is more sustainable.

                    Instead of writing:

                        Example:

                        int myNumbers[5] = {10, 20, 30, 40, 50};
                        for (int i = 0; i < 5; i++) {
                        cout << myNumbers[i] << "\n";
                        }

                    It is better to write:

                        Example:

                        int myNumbers[5] = {10, 20, 30, 40, 50};
                        for (int i = 0; i < sizeof(myNumbers) / sizeof(int); i++) {
                        cout << myNumbers[i] << "\n";
                        }

                    Note that, in C++ version 11 (2011), you can also use the "for-each" loop:

                        Example:

                        int myNumbers[5] = {10, 20, 30, 40, 50};
                        for (int i : myNumbers) {
                        cout << i << "\n";
                        }


            Multi-Dimensional Arrays:

                A multi-dimensional array is an array of arrays.

                To declare a multi-dimensional array, define the variable type,
                specify the name of the array followed by square brackets which specify how many elements the main array has,
                followed by another set of square brackets which indicates how many elements the sub-arrays have:

                    ex)

                    string letters[2][4];

                As with ordinary arrays, you can insert values with an array literal - a comma-separated list inside curly braces.
                In a multi-dimensional array, each element in an array literal is another array literal.

                    ex)

                    string letters[2][4] = {
                    { "A", "B", "C", "D" },
                    { "E", "F", "G", "H" }
                    };

                Each set of square brackets in an array declaration adds another dimension to an array.
                An array like the one above is said to have two dimensions.

                Arrays can have any number of dimensions. The more dimensions an array has, the more complex the code becomes.
                The following array has three dimensions:

                    string letters[2][2][2] = {
                    {
                        { "A", "B" },
                        { "C", "D" }
                    },
                    {
                        { "E", "F" },
                        { "G", "H" }
                    }
                    };

            Access the Elements of a Multi-Dimensional Array:

                To access an element of a multi-dimensional array, specify an index number in each of the array's dimensions.
                This statement accesses the value of the element in the first row (0) and third column (2) of the letters array.

                Example:

                    string letters[2][4] = {
                    { "A", "B", "C", "D" },
                    { "E", "F", "G", "H" }
                    };

                    cout << letters[0][2];  // Outputs "C"

                    Remember that: Array indexes start with 0: [0] is the first element. [1] is the second element, etc.

                Change Elements in a Multi-Dimensional Array:

                    To change the value of an element, refer to the index number of the element in each of the dimensions:

                    Example:

                        string letters[2][4] = {
                        { "A", "B", "C", "D" },
                        { "E", "F", "G", "H" }
                        };
                        letters[0][0] = "Z";

                        cout << letters[0][0];  // Now outputs "Z" instead of "A"

                Loop Through a Multi-Dimensional Array:

                    To loop through a multi-dimensional array, you need one loop for each of the array's dimensions.

                    The following example outputs all elements in the letters array:

                    Example:

                        string letters[2][4] = {
                        { "A", "B", "C", "D" },
                        { "E", "F", "G", "H" }
                        };

                        for (int i = 0; i < 2; i++) {
                        for (int j = 0; j < 4; j++) {
                            cout << letters[i][j] << "\n";
                        }
                        }

                Why Multi-Dimensional Arrays?:

                    Multi-dimensional arrays are great at representing grids. This example shows a practical use for them.
                    In the following example we use a multi-dimensional array to represent a small game of Battleship:

                    Example
                    // We put "1" to indicate there is a ship.
                    bool ships[4][4] = {
                    { 0, 1, 1, 0 },
                    { 0, 0, 0, 0 },
                    { 0, 0, 1, 0 },
                    { 0, 0, 1, 0 }
                    };

                    // Keep track of how many hits the player has and how many turns they have played in these variables
                    int hits = 0;
                    int numberOfTurns = 0;

                    // Allow the player to keep going until they have hit all four ships
                    while (hits < 4) {
                    int row, column;

                    cout << "Selecting coordinates\n";

                    // Ask the player for a row
                    cout << "Choose a row number between 0 and 3: ";
                    cin >> row;

                    // Ask the player for a column
                    cout << "Choose a column number between 0 and 3: ";
                    cin >> column;

                    // Check if a ship exists in those coordinates
                    if (ships[row][column]) {
                        // If the player hit a ship, remove it by setting the value to zero.
                        ships[row][column] = 0;

                        // Increase the hit counter
                        hits++;

                        // Tell the player that they have hit a ship and how many ships are left
                        cout << "Hit! " << (4-hits) << " left.\n\n";
                    } else {
                        // Tell the player that they missed
                        cout << "Miss\n\n";
                    }

                    // Count how many turns the player has taken
                    numberOfTurns++;
                    }

                    cout << "Victory!\n";
                    cout << "You won in " << numberOfTurns << " turns";

C++ Structures:

        Structures (also called structs) are a way to group several related variables into one place. Each variable in the structure is
        known as a member of the structure.

        Unlike an array, a structure can contain many different data types (int, string, bool, etc.).

        Create a Structure:

                To create a structure, use the struct keyword and declare each of its members inside curly braces.

                After the declaration, specify the name of the structure variable (myStructure in the example below):

                struct {             // Structure declaration
                int myNum;         // Member (int variable)
                string myString;   // Member (string variable)
                } myStructure;       // Structure variable


                Access Structure Members:

                    To access members of a structure, use the dot syntax (.):

                    Example:

                    Assign data to members of a structure and print it:

                    // Create a structure variable called myStructure
                    struct {
                    int myNum;
                    string myString;
                    } myStructure;

                    // Assign values to members of myStructure
                    myStructure.myNum = 1;
                    myStructure.myString = "Hello World!";

                    // Print members of myStructure
                    cout << myStructure.myNum << "\n";
                    cout << myStructure.myString << "\n";


                One Structure in Multiple Variables:

                    You can use a comma (,) to use one structure in many variables:

                    struct {
                    int myNum;
                    string myString;
                    } myStruct1, myStruct2, myStruct3; // Multiple structure variables separated with commas

                Named Structures;

                    By giving a name to the structure, you can treat it as a data type.
                    This means that you can create variables with this structure anywhere in the program at any time.

                    To create a named structure, put the name of the structure right after the struct keyword:

                    struct myDataType { // This structure is named "myDataType"
                    int myNum;
                    string myString;
                    };

                    To declare a variable that uses the structure, use the name of the structure as the data type of the variable:

                        myDataType myVar;

C++ References;

        Creating References;

            A reference variable is a "reference" to an existing variable, and it is created with the & operator:

                string food = "Pizza";  // food variable
                string &meal = food;    // reference to food


            Now, we can use either the variable name food or the reference name meal to refer to the food variable:

                Example:

                string food = "Pizza";
                string &meal = food;

                cout << food << "\n";  // Outputs Pizza
                cout << meal << "\n";  // Outputs Pizza

        Memory Address:

            In the example from the previous page, the & operator was used to create a reference variable.
            But it can also be used to get the memory address of a variable; which is the location of where the variable is stored on the computer.

            When a variable is created in C++, a memory address is assigned to the variable.
            And when we assign a value to the variable, it is stored in this memory address.

            To access it, use the & operator, and the result will represent where the variable is stored:

                    Example:

                    string food = "Pizza";

                    cout << &food; // Outputs 0x6dfed4

                    Note: The memory address is in hexadecimal form (0x..). Note that you may not get the same result in your program.

                References and Pointers (which you will learn about in the next chapter) are important in C++,
                because they give you the ability to manipulate the data in the computer's memory - which can reduce the code and improve
                the performance.

                These two features are one of the things that make C++ stand out from other programming languages, like Python and Java.

C++ Pointers:

        Creating Pointers:

            You learned from the previous chapter, that we can get the memory address of a variable by using the & operator:

            Example:

                string food = "Pizza"; // A food variable of type string

                cout << food;  // Outputs the value of food (Pizza)
                cout << &food; // Outputs the memory address of food (0x6dfed4)

            A pointer however, is a variable that stores the memory address as its value.

            A pointer variable points to a data type (like int or string) of the same type, and is created with the * operator.
            The address of the variable you're working with is assigned to the pointer:

                Example:

                string food = "Pizza";  // A food variable of type string
                string* ptr = &food;    // A pointer variable, with the name ptr, that stores the address of food

                // Output the value of food (Pizza)
                cout << food << "\n";

                // Output the memory address of food (0x6dfed4)
                cout << &food << "\n";

                // Output the memory address of food with the pointer (0x6dfed4)
                cout << ptr << "\n";

                Example explained:

                    Create a pointer variable with the name ptr, that points to a string variable, by using the asterisk sign * (string* ptr).
                    Note that the type of the pointer has to match the type of the variable you're working with.

                    Use the & operator to store the memory address of the variable called food, and assign it to the pointer.

                    Now, ptr holds the value of food's memory address.

                    Tip: There are three ways to declare pointer variables, but the first way is preferred:

                        string* mystring; // Preferred
                        string *mystring;
                        string * mystring;

            C++ Dereference:

                Get Memory Address and Value:

                    In the example from the previous page, we used the pointer variable to get the memory address of a variable
                    (used together with the & reference operator). However, you can also use the pointer to get the value of the variable,
                    by using the * operator (the dereference operator):

                    Example:

                        string food = "Pizza";  // Variable declaration
                        string* ptr = &food;    // Pointer declaration

                        // Reference: Output the memory address of food with the pointer (0x6dfed4)
                        cout << ptr << "\n";

                        // Dereference: Output the value of food with the pointer (Pizza)
                        cout << *ptr << "\n";

                        Note that the * sign can be confusing here, as it does two different things in our code:

                            When used in declaration (string* ptr), it creates a pointer variable.
                            When not used in declaration, it act as a dereference operator.

            Modify the Pointer Value:

                You can also change the pointer's value. But note that this will also change the value of the original variable:

                Example:

                    string food = "Pizza";
                    string* ptr = &food;

                    // Output the value of food (Pizza)
                    cout << food << "\n";

                    // Output the memory address of food (0x6dfed4)
                    cout << &food << "\n";

                    // Access the memory address of food and output its value (Pizza)
                    cout << *ptr << "\n";

                    // Change the value of the pointer
                    *ptr = "Hamburger";

                    // Output the new value of the pointer (Hamburger)
                    cout << *ptr << "\n";

                    // Output the new value of the food variable (Hamburger)
                    cout << food << "\n";
